"""empty message

Revision ID: de277d1b0292
Revises: ed919e636411
Create Date: 2024-11-21 17:54:17.402767
"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'de277d1b0292'
down_revision = 'ed919e636411'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('wishlist', schema=None) as batch_op:
        # Add the customer_id column as nullable initially
        batch_op.add_column(sa.Column('customer_id', sa.Integer(), nullable=True))
        
        # Drop existing foreign key constraint for 'product_id'
        batch_op.drop_constraint('fk_wishlist_product_id', type_='foreignkey')
        
        # Create new foreign keys with specified names
        batch_op.create_foreign_key('fk_wishlist_customer_id', 'customer', ['customer_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key('fk_wishlist_product_id', 'product', ['product_id'], ['id'], ondelete='CASCADE')
    
    # After the column is added, you need to populate `customer_id` with appropriate data.
    # This step depends on your business logic. For example, you might need to update all wishlist rows with a valid customer_id.
    # You can do this manually or write a raw SQL query within the migration:
    # Example (you may need to replace `1` with the appropriate customer_id based on your data):
    op.execute("UPDATE wishlist SET customer_id = 1 WHERE customer_id IS NULL")
    
    # Now, alter the column to make it NOT NULL
    with op.batch_alter_table('wishlist', schema=None) as batch_op:
        batch_op.alter_column('customer_id', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('wishlist', schema=None) as batch_op:
        # Drop newly created foreign key constraints
        batch_op.drop_constraint('fk_wishlist_customer_id', type_='foreignkey')
        batch_op.drop_constraint('fk_wishlist_product_id', type_='foreignkey')
        
        # Recreate the original foreign key constraint for 'product_id'
        batch_op.create_foreign_key('fk_wishlist_product_id', 'product', ['product_id'], ['id'])

        # Drop the 'customer_id' column
        batch_op.drop_column('customer_id')

    # ### end Alembic commands ###
